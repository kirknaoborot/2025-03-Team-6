import React, { createContext, useContext, useEffect, useRef, useState } from "react";
import * as signalR from "@microsoft/signalr";

/**
 * –¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
interface SignalRContextValue {
  connection: signalR.HubConnection | null;
  connected: boolean;
  connecting: boolean;
  start: () => Promise<void>;
  stop: () => Promise<void>;
}

/**
 * –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç SignalR
 */
const SignalRContext = createContext<SignalRContextValue>({
  connection: null,
  connected: false,
  connecting: false,
  start: async () => {},
  stop: async () => {},
});

/**
 * –•—É–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
 */
export const useSignalR = () => useContext(SignalRContext);

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä, —Å–æ–∑–¥–∞—é—â–∏–π –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º SignalR
 */
export const SignalRProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [connected, setConnected] = useState(false);
  const [connecting, setConnecting] = useState(false);
  const connectionRef = useRef<signalR.HubConnection | null>(null);

  // –°—Ç–∞—Ä—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const start = async () => {
    if (connecting || connected) return;
    if (!connectionRef.current) return;

    const conn = connectionRef.current;

    try {
      setConnecting(true);
      await conn.start();

      // –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const raw = localStorage.getItem("auth");
      const auth = raw ? JSON.parse(raw) : null;
      const userId = auth?.user?.id ?? "anonymous";
      await conn.invoke("UserOnline", JSON.stringify({ id: userId }));

      console.log("‚úÖ SignalR connected");
      setConnected(true);
    } catch (err) {
      console.error("‚ùå SignalR connection error:", err);
      setConnected(false);
    } finally {
      setConnecting(false);
    }
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const stop = async () => {
    const conn = connectionRef.current;
    if (!conn) return;
    try {
      await conn.stop();
      setConnected(false);
      console.log("üîå SignalR stopped");
    } catch {
      /* ignore */
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–µ–¥–∏–Ω–æ–∂–¥—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
  useEffect(() => {
    // –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–¥–Ω–∏–º–∞–µ–º SignalR
    try {
      const raw = localStorage.getItem("auth");
      const auth = raw ? JSON.parse(raw) : null;
      const role = String(auth?.user?.role ?? "").toLowerCase();
      const isAdmin = role === "0" || role === "administrator" || role === "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
      if (isAdmin) {
        return; // –Ω–µ —Å–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      }
    } catch {}

    const conn = new signalR.HubConnectionBuilder()
      .withUrl("http://localhost:54000/onlinestatus", {
        withCredentials: true,
        // –µ—Å–ª–∏ —É —Ç–µ–±—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É:
        // accessTokenFactory: () => localStorage.getItem("accessToken") || "",
      })
      .withAutomaticReconnect()
      .configureLogging(signalR.LogLevel.Information)
      .build();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    conn.on("UserCameOnline", (uid) => {
      console.log("üü¢ UserCameOnline:", uid);
    });

    conn.on("ConversationDistributed", (msg) => {
      console.log("üì® ConversationDistributed:", msg);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
      window.dispatchEvent(new CustomEvent("conversation:update", { detail: msg }));
    });

    conn.onreconnected(() => {
      console.log("‚ôªÔ∏è SignalR reconnected");
      setConnected(true);
    });

    conn.onclose(() => {
      console.log("‚ùå SignalR disconnected");
      setConnected(false);
    });

    connectionRef.current = conn;

    // –°—Ç–∞—Ä—Ç—É–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    start();

    // –ß–∏—Å—Ç–∏–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
    return () => {
      conn.stop().catch(() => {});
      connectionRef.current = null;
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <SignalRContext.Provider value={{ connection: connectionRef.current, connected, connecting, start, stop }}>
      {children}
    </SignalRContext.Provider>
  );
};
